package com.example.screentimemanager.ui.friend

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.DialogFragment
import com.example.screentimemanager.R
import com.example.screentimemanager.data.firebase.usage.UsageFirebaseDao
import com.example.screentimemanager.data.local.usage.UsageDatabase
import com.example.screentimemanager.data.repository.UsageRepository
import com.example.screentimemanager.util.Util
import com.google.firebase.database.FirebaseDatabase
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers.IO
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import lecho.lib.hellocharts.model.Axis
import lecho.lib.hellocharts.model.Column
import lecho.lib.hellocharts.model.ColumnChartData
import lecho.lib.hellocharts.model.SubcolumnValue
import lecho.lib.hellocharts.view.ColumnChartView

class FriendInfoDialog: DialogFragment() {
    companion object {
        val FRIEND_EMAIL_KEY = "friend-email-key"
    }

    private lateinit var friendEmail: String
    private lateinit var usageRepository: UsageRepository
    private lateinit var usageFirebaseDao: UsageFirebaseDao
    private lateinit var chart: ColumnChartView

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        val root = inflater.inflate(R.layout.dialog_friend_info, container, false)
        friendEmail = arguments?.getString(FRIEND_EMAIL_KEY).toString()

        chart = root.findViewById(R.id.lcv_histogram)

        setupRepo()

        CoroutineScope(IO).launch {
            val chartData = generateColumnData()
            chart.columnChartData = chartData
        }

        return root
    }

    private fun setupRepo() {
        val firebaseDatabase = FirebaseDatabase.getInstance()
        val usageDatabase = UsageDatabase.getInstance(requireActivity())
        usageFirebaseDao = UsageFirebaseDao(firebaseDatabase.reference)
        val usageDao = usageDatabase.usageDao
        usageRepository = UsageRepository(usageFirebaseDao, usageDao)
    }

    private suspend fun generateColumnData(): ColumnChartData {
        return withContext(IO) {
            val (day, month, year) = Util.getCurrentDate()

            // fetch usage data from the repository
            val usages = usageFirebaseDao.getUsageData(friendEmail, day, month, year)
            
            val columns = mutableListOf<Column>()

            for (usage in usages) {
                val values = mutableListOf<SubcolumnValue>()
                values.add(SubcolumnValue(usage.usage.toFloat()))
                columns.add(Column(values).setHasLabels(true).setHasLabelsOnlyForSelected(true))
            }

            val columnChartData = ColumnChartData(columns)
            val axisX = Axis().setAutoGenerated(true)
            val axisY = Axis().setHasLines(true)
            columnChartData.axisXBottom = axisX
            columnChartData.axisYLeft = axisY

            return@withContext columnChartData
        }
    }
}